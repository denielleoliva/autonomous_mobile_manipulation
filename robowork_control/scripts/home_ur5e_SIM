#!/usr/bin/env python
import time
import rospy
import actionlib
import math
from control_msgs.msg import *
from trajectory_msgs.msg import *

hosting_robot_prefix = "bvr_SIM/"
ur5_e_robot_prefix = "main_arm_SIM/"
ur5e_arm_prefix = hosting_robot_prefix + ur5_e_robot_prefix
#ur5e_arm_controller_topic = ur5_e_robot_prefix + "scaled_pos_traj_controller/follow_joint_trajectory"
ur5e_arm_controller_topic = ur5_e_robot_prefix + "compliance_controller/follow_joint_trajectory"

JOINT_NAMES = [ur5e_arm_prefix+'shoulder_pan_joint',
               ur5e_arm_prefix+'shoulder_lift_joint',
               ur5e_arm_prefix+'elbow_joint',
               ur5e_arm_prefix+'wrist_1_joint',
               ur5e_arm_prefix+'wrist_2_joint',
               ur5e_arm_prefix+'wrist_3_joint']

shoulder_pan_home = 0.0 #1.0*math.pi/2
shoulder_lift_home = -1.5*math.pi/6
elbow_home = -4.5*math.pi/6
wrist_1_home = -0.15*math.pi/2
wrist_2_home = 1.0*math.pi/2
wrist_3_home = 0.0*math.pi/2

Qhome = [shoulder_pan_home                    ,shoulder_lift_home                     ,elbow_home                     ,wrist_1_home                    ,wrist_2_home                    ,wrist_3_home]
slowdown = 1.0

client = None

def move():
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = JOINT_NAMES
    g.trajectory.points = [
        JointTrajectoryPoint(positions=Qhome, velocities=[0]*6, time_from_start=rospy.Duration(slowdown*3.0))]
    client.send_goal(g)
    try:
        client.wait_for_result()
    except KeyboardInterrupt:
        client.cancel_goal()
        raise

def move_disordered():
    order = [4, 2, 3, 1, 5, 0]
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = [JOINT_NAMES[i] for i in order]
    qhome= [Qhome[i] for i in order]
    g.trajectory.points = [
        JointTrajectoryPoint(positions=qhome, velocities=[0]*6, time_from_start=rospy.Duration(slowdown*1.0))]
    client.send_goal(g)
    client.wait_for_result()

def move_repeated():
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = JOINT_NAMES

    d = slowdown*3.0
    g.trajectory.points = []
    for i in range(10):
        g.trajectory.points.append(
            JointTrajectoryPoint(positions=Qhome, velocities=[0]*6, time_from_start=rospy.Duration(d)))
    client.send_goal(g)
    try:
        client.wait_for_result()
    except KeyboardInterrupt:
        client.cancel_goal()
        raise

def move_interrupt():
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = JOINT_NAMES
    g.trajectory.points = [
        JointTrajectoryPoint(positions=Q1, velocities=[0]*6, time_from_start=rospy.Duration(slowdown*1.0))]

    client.send_goal(g)
    time.sleep(2.0)
    print "Interrupting"
    client.send_goal(g)
    try:
        client.wait_for_result()
    except KeyboardInterrupt:
        client.cancel_goal()
        raise

def main():
    global client
    try:
        rospy.init_node("ur5_e_arm_move", anonymous=True, disable_signals=True)
        client = actionlib.SimpleActionClient(ur5e_arm_controller_topic, FollowJointTrajectoryAction)
        print "Waiting for ur5_e_arm server..."
        client.wait_for_server()
        print "Connected to ur5_e_arm server"
        move()
    except KeyboardInterrupt:
        rospy.signal_shutdown("KeyboardInterrupt")
        raise

if __name__ == '__main__': main()
